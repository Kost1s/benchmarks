#!/usr/bin/env bash
##
## Copyright 2015-2023 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

set -euxo pipefail

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "${DIR}/remote-benchmarks-helper"

required_vars=(
  "CLIENT_JAVA_HOME"
  "CLIENT_BENCHMARKS_PATH"
  "CLIENT_DRIVER_CONDUCTOR_CPU_CORE"
  "CLIENT_DRIVER_SENDER_CPU_CORE"
  "CLIENT_DRIVER_RECEIVER_CPU_CORE"
  "CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE"
  "CLIENT_NON_ISOLATED_CPU_CORES"
  "CLIENT_CPU_NODE"
  "CLIENT_DESTINATION_CHANNEL"
  "CLIENT_SOURCE_CHANNEL"
  "SERVER_JAVA_HOME"
  "SERVER_BENCHMARKS_PATH"
  "SERVER_DRIVER_CONDUCTOR_CPU_CORE"
  "SERVER_DRIVER_SENDER_CPU_CORE"
  "SERVER_DRIVER_RECEIVER_CPU_CORE"
  "SERVER_ECHO_CPU_CORE"
  "SERVER_NON_ISOLATED_CPU_CORES"
  "SERVER_CPU_NODE"
  "SERVER_DESTINATION_CHANNEL"
  "SERVER_SOURCE_CHANNEL")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [[ -v required_var_missing && -n "${required_var_missing}" ]]
then
  exit 1
fi

ef_vi_rxq_size=${AERON_EF_VI_RXQ_SIZE:-2048} # ef_vi receive queue size
ef_vi_txq_size=${AERON_EF_VI_TXQ_SIZE:-2048} # ef_vi send queue size
so_sndbuf="${AERON_SOCKET_SO_SNDBUF:-2m}"
so_rcvbuf="${AERON_SOCKET_SO_RCVBUF:-2m}"
rcv_initial_window="${AERON_RCV_INITIAL_WINDOW_LENGTH:-2m}"
max_messages_per_send="${AERON_NETWORK_PUBLICATION_MAX_MESSAGES_PER_SEND:-2}"
dpdk_config_overrides=
if [[ -v AERON_DPDK_MTU && -n ${AERON_DPDK_MTU} ]];
then
  dpdk_config_overrides="AERON_DPDK_MTU=${AERON_DPDK_MTU}"
fi

destination_stream_id="${DESTINATION_STREAM_ID:-1000000}"
source_stream_id="${SOURCE_STREAM_ID:-2000000}"
context=""
mtu_list=(1408)
onload="onload --profile=latency "
client_drivers=()
server_drivers=()
client_aeron_dir="/dev/shm/aeron"
server_aeron_dir="/dev/shm/aeron"
client_file_page_size=4096
server_file_page_size=4096
declare -A drivers
drivers=(['java']='' ['java-onload']='' ['c']='' ['c-onload']='' ['c-ef-vi']='' ['c-dpdk']='' ['c-ats']='' ['c-ats-onload']='' ['c-ats-ef-vi']='' ['c-ats-dpdk']='')

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --context)
    context="${2}"
    shift
    shift
    ;;
  --onload)
    onload="${2}"
    shift
    shift
    ;;
  --mtu)
    IFS=',';
    read -ra mtu_list <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --client-drivers)
    IFS=',';
    read -ra client_drivers <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --server-drivers)
    IFS=',';
    read -ra server_drivers <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --client-aeron-dir)
    client_aeron_dir="${2}"
    shift
    shift
    ;;
  --server-aeron-dir)
    server_aeron_dir="${2}"
    shift
    shift
    ;;
  --client-file-page-size)
    client_file_page_size=${2}
    shift
    shift
    ;;
  --server-file-page-size)
    server_file_page_size=${2}
    shift
    shift
    ;;
  -h|--help)
    echo "${0} --client-drivers \"client-media-drivers-list-csv\" --server-drivers \"server-media-drivers-list-csv\" \
    [--context \"\$context\"] [--onload \"\$onload_command\"] [--mtu \"\$mtu-csv\"] \
    [--client-aeron-dir \"\$client-aeron.dir\"] [--server-aeron-dir \"\$server-aeron.dir\"]\
    [--client-file-page-size \"\$client-aeron.file.page.size\"] [--server-file-page-size \"\$server-aeron.file.page.size\"]\
          the support media drivers are: ${!drivers[*]}"
    exit
    ;;
  *)
    echo "Invalid parameter '${1}'. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

scripts_path="benchmarks_path_var/scripts/aeron"

driver_properties="echo -e \"\
aeron.dir=aeron_dir_var
aeron.file.page.size=file_page_size_var
aeron.conductor.cpu.affinity=driver_conductor_cpu_core_var\n \
aeron.sender.cpu.affinity=driver_sender_cpu_core_var\n \
aeron.receiver.cpu.affinity=driver_receiver_cpu_core_var\n \
aeron.mtu.length=driver_mtu_var\n \
aeron.ipc.mtu.length=driver_mtu_var\n \
aeron.socket.so_sndbuf=${so_sndbuf}\n \
aeron.socket.so_rcvbuf=${so_rcvbuf}\n \
aeron.rcv.initial.window.length=${rcv_initial_window}\n \
aeron.network.publication.max.messages.per.send=${max_messages_per_send}\n \
aeron.receiver.io.vector.capacity=${max_messages_per_send}\n \
aeron.sender.io.vector.capacity=${max_messages_per_send}\n \
\" > ${scripts_path}/benchmark.properties"

drivers['java']="${driver_properties}; \
      $(start_media_driver "${scripts_path}/media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['java-onload']="${driver_properties}; \
      export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
      && $(start_media_driver "${scripts_path}/media-driver" "${onload}" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c']="${driver_properties}; \
      $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c-onload']="${driver_properties}; \
      export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
      && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c-ef-vi']="${driver_properties}; \
      export EF_VI_RXQ_SIZE=${ef_vi_rxq_size} EF_VI_TXQ_SIZE=${ef_vi_txq_size} \
      AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_ef_vi.so\" \
      AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
      AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
      && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c-dpdk']="${driver_properties}; \
      export AERON_DPDK_GATEWAY_IPV4_ADDRESS=driver_aeron_dpdk_gateway_ipv4_address_var \
      AERON_DPDK_LOCAL_IPV4_ADDRESS=driver_aeron_dpdk_local_ipv4_address_var \
      ${dpdk_config_overrides} \
      && $(start_media_driver "${scripts_path}/c-aeronmd-dpdk" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c-ats']="${driver_properties}; \
        export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c-ats-onload']="${driver_properties}; \
        export EF_NO_FAIL=0 EF_RXQ_SIZE=${ef_vi_rxq_size} EF_TXQ_SIZE=${ef_vi_txq_size} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c-ats-ef-vi']="${driver_properties}; \
        export EF_VI_RXQ_SIZE=${ef_vi_rxq_size} EF_VI_TXQ_SIZE=${ef_vi_txq_size} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\",\"${scripts_path}/libaeron_ef_vi.so\" \
        AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
        AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

drivers['c-ats-dpdk']="${driver_properties}; \
        export AERON_DPDK_GATEWAY_IPV4_ADDRESS=driver_aeron_dpdk_gateway_ipv4_address_var \
        AERON_DPDK_LOCAL_IPV4_ADDRESS=driver_aeron_dpdk_local_ipv4_address_var \
        ${dpdk_config_overrides} \
        AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        && $(start_media_driver "${scripts_path}/c-aeronmd-dpdk" "" "driver_cpu_node_var" "driver_non_isolated_cpu_cores_var" "driver_conductor_cpu_core_var" "driver_sender_cpu_core_var" "driver_receiver_cpu_core_var")"

if [ "${#client_drivers[@]}" != "${#server_drivers[@]}" ]
then
  echo "Enabled media driver lists have different size: client_drivers=(${client_drivers[*]}) vs server_drivers=(${server_drivers[*]})"
  exit 1
fi

for index in "${!client_drivers[@]}"
do
  driver="${client_drivers[index]# }"
  if [ -z "${drivers[$driver]+x}" ]
  then
    echo "Unknown client driver '${driver}': (${client_drivers[*]})"
    exit 1
  fi

  driver="${server_drivers[index]# }"
  if [ -z "${drivers[$driver]+x}" ]
  then
    echo "Unknown server driver '${driver}': (${server_drivers[*]})"
    exit 1
  fi
done

test_type="aeron-echo"
test_dir="${test_type}-$(date '+%Y-%m-%d-%H-%M-%S')"
output_dir="scripts/results/${test_dir}"
for index in "${!client_drivers[@]}"
do
  client_md=${client_drivers[index]# }
  server_md=${server_drivers[index]# }
  for mtu in "${mtu_list[@]}"
  do
    test="${test_type}_${client_md}-vs-${server_md}_${context}_mtu=${mtu}"
    echo -e "\n Testing scenario: '${test}'\n"

    client_driver="${drivers[${client_md}]//aeron_dir_var/${client_aeron_dir}}"
    client_driver="${client_driver//file_page_size_var/${client_file_page_size}}"
    client_driver="${client_driver//driver_mtu_var/${mtu}}"
    client_driver="${client_driver//benchmarks_path_var/${CLIENT_BENCHMARKS_PATH}}"
    client_driver="${client_driver//driver_cpu_node_var/${CLIENT_CPU_NODE}}"
    client_driver="${client_driver//driver_non_isolated_cpu_cores_var/${CLIENT_NON_ISOLATED_CPU_CORES}}"
    client_driver="${client_driver//driver_conductor_cpu_core_var/${CLIENT_DRIVER_CONDUCTOR_CPU_CORE}}"
    client_driver="${client_driver//driver_sender_cpu_core_var/${CLIENT_DRIVER_SENDER_CPU_CORE}}"
    client_driver="${client_driver//driver_receiver_cpu_core_var/${CLIENT_DRIVER_RECEIVER_CPU_CORE}}"
    client_driver="${client_driver//driver_aeron_dpdk_gateway_ipv4_address_var/${CLIENT_AERON_DPDK_GATEWAY_IPV4_ADDRESS}}"
    client_driver="${client_driver//driver_aeron_dpdk_local_ipv4_address_var/${CLIENT_AERON_DPDK_LOCAL_IPV4_ADDRESS}}"

    server_driver="${drivers[${server_md}]//aeron_dir_var/${server_aeron_dir}}"
    server_driver="${server_driver//file_page_size_var/${server_file_page_size}}"
    server_driver="${server_driver//driver_mtu_var/${mtu}}"
    server_driver="${server_driver//benchmarks_path_var/${SERVER_BENCHMARKS_PATH}}"
    server_driver="${server_driver//driver_cpu_node_var/${SERVER_CPU_NODE}}"
    server_driver="${server_driver//driver_non_isolated_cpu_cores_var/${SERVER_NON_ISOLATED_CPU_CORES}}"
    server_driver="${server_driver//driver_conductor_cpu_core_var/${SERVER_DRIVER_CONDUCTOR_CPU_CORE}}"
    server_driver="${server_driver//driver_sender_cpu_core_var/${SERVER_DRIVER_SENDER_CPU_CORE}}"
    server_driver="${server_driver//driver_receiver_cpu_core_var/${SERVER_DRIVER_RECEIVER_CPU_CORE}}"
    server_driver="${server_driver//driver_aeron_dpdk_gateway_ipv4_address_var/${SERVER_AERON_DPDK_GATEWAY_IPV4_ADDRESS}}"
    server_driver="${server_driver//driver_aeron_dpdk_local_ipv4_address_var/${SERVER_AERON_DPDK_LOCAL_IPV4_ADDRESS}}"

    client_class_name="uk.co.real_logic.benchmarks.remote.LoadTestRig"
    server_class_name="uk.co.real_logic.benchmarks.aeron.remote.EchoNode"

    start_client="\
    export JAVA_HOME=\"${CLIENT_JAVA_HOME}\" \
    ; $(kill_java_process "${client_class_name}") \
    ; ${client_driver} \
    && numactl --membind=${CLIENT_CPU_NODE} --cpunodebind=${CLIENT_CPU_NODE} --physcpubind=\"${CLIENT_NON_ISOLATED_CPU_CORES}\" ${CLIENT_BENCHMARKS_PATH}/scripts/aeron/echo-client & \
    $(await_java_process_start "${client_class_name}") \
    ; $(pin_thread \${pid} "load-test-rig" "${CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE}") \
    && tail --pid=\$! -f /dev/null; kill -9 \${media_driver_pid}; wait"

    start_server="\
    export JAVA_HOME=\"${SERVER_JAVA_HOME}\" \
    && ${server_driver} \
    && numactl --membind=${SERVER_CPU_NODE} --cpunodebind=${SERVER_CPU_NODE} --physcpubind=\"${SERVER_NON_ISOLATED_CPU_CORES}\" ${SERVER_BENCHMARKS_PATH}/scripts/aeron/echo-server & \
    $(await_java_process_start "${server_class_name}") \
    ; $(pin_thread \${pid} "echo" "${SERVER_ECHO_CPU_CORE}") \
    && tail --pid=\$! -f /dev/null"

    stop_server="$(kill_java_process "${server_class_name}"); \
    $(stop_media_driver)"

    run_benchmarks \
      "${start_client}" \
      "$(kill_java_process "${server_class_name}"); ${start_server}" \
      "${stop_server}" \
      "${CLIENT_BENCHMARKS_PATH}/${output_dir}/${client_md}-vs-${server_md}_mtu=${mtu}" \
      "${SERVER_BENCHMARKS_PATH}/${output_dir}/${client_md}-vs-${server_md}_mtu=${mtu}" \
      "-Duk.co.real_logic.benchmarks.remote.output.file=${test} \
      -Duk.co.real_logic.benchmarks.aeron.remote.destination.channel=${CLIENT_DESTINATION_CHANNEL} \
      -Duk.co.real_logic.benchmarks.aeron.remote.destination.stream=${destination_stream_id} \
      -Duk.co.real_logic.benchmarks.aeron.remote.source.channel=${CLIENT_SOURCE_CHANNEL} \
      -Duk.co.real_logic.benchmarks.aeron.remote.source.stream=${source_stream_id}" \
      "-Duk.co.real_logic.benchmarks.aeron.remote.destination.channel=${SERVER_DESTINATION_CHANNEL} \
      -Duk.co.real_logic.benchmarks.aeron.remote.destination.stream=${destination_stream_id} \
      -Duk.co.real_logic.benchmarks.aeron.remote.source.channel=${SERVER_SOURCE_CHANNEL} \
      -Duk.co.real_logic.benchmarks.aeron.remote.source.stream=${source_stream_id}"
  done
done

collect_environment_info "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${CLIENT_BENCHMARKS_PATH}/scripts" "${CLIENT_BENCHMARKS_PATH}/${output_dir}" "${CLIENT_JAVA_HOME}"
collect_environment_info "${SSH_SERVER_USER}" "${SSH_SERVER_KEY_FILE}" "${SSH_SERVER_NODE}" "${SERVER_BENCHMARKS_PATH}/scripts" "${SERVER_BENCHMARKS_PATH}/${output_dir}" "${SERVER_JAVA_HOME}"
download_results "${SSH_CLIENT_USER}" "${SSH_CLIENT_KEY_FILE}" "${SSH_CLIENT_NODE}" "${CLIENT_BENCHMARKS_PATH}/${output_dir}" "${DIR}/.." "${test_dir}-client"
download_results "${SSH_SERVER_USER}" "${SSH_SERVER_KEY_FILE}" "${SSH_SERVER_NODE}" "${SERVER_BENCHMARKS_PATH}/${output_dir}" "${DIR}/.." "${test_dir}-server"

#!/usr/bin/env bash
##
## Copyright 2015-2022 Real Logic Limited.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
## https://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "${DIR}/remote-benchmarks-helper"

required_vars=(
  "CLIENT_JAVA_HOME"
  "CLIENT_BENCHMARKS_PATH"
  "CLIENT_DRIVER_CONDUCTOR_CPU_CORE"
  "CLIENT_DRIVER_SENDER_CPU_CORE"
  "CLIENT_DRIVER_RECEIVER_CPU_CORE"
  "CLIENT_DRIVER_OTHER_CPU_CORES"
  "CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE"
  "CLIENT_LOAD_TEST_RIG_OTHER_CPU_CORES"
  "CLIENT_INTERFACE"
  "SERVER_JAVA_HOME"
  "SERVER_BENCHMARKS_PATH"
  "SERVER_DRIVER_CONDUCTOR_CPU_CORE"
  "SERVER_DRIVER_SENDER_CPU_CORE"
  "SERVER_DRIVER_RECEIVER_CPU_CORE"
  "SERVER_DRIVER_OTHER_CPU_CORES"
  "SERVER_ECHO_CPU_CORE"
  "SERVER_OTHER_CPU_CORES"
  "SERVER_INTERFACE"
  "DESTINATION_IP"
  "SOURCE_IP")

for var in "${required_vars[@]}"; do
  if [[ -z "${!var+''}" ]]
  then
    echo "env var '${var}' must be set"
    required_var_missing=true
  fi
done

if [ -n "${required_var_missing}" ];
then
  exit 1
fi

enable_java_driver=1
no_java_driver=0
enable_c_driver=1
no_c_driver=0
enable_onload=1
enable_ef_vi=1
enable_ats=1
streams=(1 2 5 10)
modes=("multiplexed" "dedicated")
results_file="aeron-echo-results"
mtu=1408
onload="onload --profile=latency --force-profiles "

while [[ $# -gt 0 ]]
do
  case "${1}" in
  --disable-c-driver)
    enable_c_driver=0
    shift
    ;;
  --no-c-driver)
    no_c_driver=1
    shift
    ;;
  --disable-java-driver)
    enable_java_driver=0
    shift
    ;;
  --no-java-driver)
    no_java_driver=1
    shift
    ;;
  --no-onload)
    enable_onload=0
    shift
    ;;
  --onload)
    onload="${2}"
    shift
    shift
    ;;
  --no-ef_vi)
    enable_ef_vi=0
    shift
    ;;
  --no-ats)
    enable_ats=0
    shift
    ;;
  --streams)
    IFS=',';
    read -ra streams <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --modes)
    IFS=',';
    read -ra modes <<< "${2}"
    unset IFS;
    shift
    shift
    ;;
  --results-file)
    results_file="${2}"
    shift
    shift
    ;;
  --mtu)
    mtu="${2}"
    shift
    shift
    ;;
  -h|--help)
    echo "${0} [--no-c-driver] [--no-java-driver] [--no-onload] [--onload \"\$onload_command\"] [--no-ef_vi] [--no-ats] [--streams \"\${streams-csv}\"] [--modes \"\${modes-csv}\"] [--mtu \$mtu]"
    exit
    ;;
  *)
    echo "Invalid parameter. Use --help to get a list of supported parameters."
    exit 1
    ;;
  esac
done

if [ "${enable_java_driver}" -ne 1 ] && [ "${enable_c_driver}" -ne 1 ]
then
  echo "At least C or Java driver must be enabled!"
  exit 1
fi

function build_drivers()
{
  local scripts_path="${1}/scripts/aeron"
  local commands=()

  if [ "${enable_java_driver}" -eq 1 ]
  then
    if [ "${no_java_driver}" -eq 0 ]
    then
      # Java driver
      commands+=("$(start_media_driver "${scripts_path}/media-driver" "" "${2}" "${3}" "${4}" "${5}")")
    fi

    if [ "${enable_onload}" -eq 1 ]
    then
      # Java driver with Onload
      commands+=("$(start_media_driver "${scripts_path}/media-driver" "${onload}" "${2}" "${3}" "${4}" "${5}")")
    fi
  fi

  if [ "${enable_c_driver}" -eq 1 ]
  then
    local create_benchmark_props="touch ${scripts_path}/benchmark.properties"
    if [ "${no_c_driver}" -eq 0 ]
    then
      # C driver
      commands+=("${create_benchmark_props}; \
        $(start_media_driver "${scripts_path}/c-media-driver" "" "${2}" "${3}" "${4}" "${5}")")
    fi

    if [ "${enable_onload}" -eq 1 ]
    then
      # C driver with Onload
      commands+=("${create_benchmark_props}; \
        $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "${2}" "${3}" "${4}" "${5}")")
    fi

    if [ "${enable_ef_vi}" -eq 1 ]
    then
      # C driver with ef_vi
      commands+=("${create_benchmark_props}; \
        export AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_ef_vi.so\" \
        AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
        AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "${2}" "${3}" "${4}" "${5}")")
    fi

    if [ "${enable_ats}" -eq 1 ]
    then
      # C driver with ATS
      commands+=("${create_benchmark_props}; \
        export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
        AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
        AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
        AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
        && $(start_media_driver "${scripts_path}/c-media-driver" "" "${2}" "${3}" "${4}" "${5}")")

      if [ "${enable_onload}" -eq 1 ]
      then
        # C driver with ATS and Onload
        commands+=("${create_benchmark_props}; \
          export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
          AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
          AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\" \
          && $(start_media_driver "${scripts_path}/c-media-driver" "${onload}" "${2}" "${3}" "${4}" "${5}")")
      fi

      if [ "${enable_ef_vi}" -eq 1 ]
      then
        # C driver with ATS and ef_vi
        commands+=("${create_benchmark_props}; \
          export AERON_TRANSPORT_SECURITY_CONF_DIR=\"${scripts_path}\" \
          AERON_TRANSPORT_SECURITY_CONF_FILE=ats.conf \
          AERON_UDP_CHANNEL_OUTGOING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_UDP_CHANNEL_INCOMING_INTERCEPTORS=\"aeron_transport_security_channel_interceptor_load\" \
          AERON_DRIVER_DYNAMIC_LIBRARIES=\"${scripts_path}/libaeron_transport_security.so\",\"${scripts_path}/libaeron_ef_vi.so\" \
          AERON_UDP_CHANNEL_TRANSPORT_BINDINGS_MEDIA=\"aeron_udp_channel_transport_ef_vi_bindings\" \
          AERON_EF_VI_CONF_FILE=\"${scripts_path}/ef_vi.conf\" \
          && $(start_media_driver "${scripts_path}/c-media-driver" "" "${2}" "${3}" "${4}" "${5}")")
      fi
    fi
  fi

  local IFS=$'\n'
  echo "${commands[*]}"
}

IFS=$'\n'
# shellcheck disable=SC2207
client_drivers=($(build_drivers "${CLIENT_BENCHMARKS_PATH}" \
"${CLIENT_DRIVER_OTHER_CPU_CORES}" "${CLIENT_DRIVER_CONDUCTOR_CPU_CORE}" "${CLIENT_DRIVER_SENDER_CPU_CORE}" "${CLIENT_DRIVER_RECEIVER_CPU_CORE}"))
# shellcheck disable=SC2207
server_drivers=($(build_drivers "${SERVER_BENCHMARKS_PATH}" \
"${SERVER_DRIVER_OTHER_CPU_CORES}" "${SERVER_DRIVER_CONDUCTOR_CPU_CORE}" "${SERVER_DRIVER_SENDER_CPU_CORE}" "${SERVER_DRIVER_RECEIVER_CPU_CORE}"))
unset IFS

if [ "${enable_java_driver}" -eq 1 ]
then
  if [ "${no_java_driver}" -eq 0 ]
  then
    scenarios=("java")
  fi

  if [ "${enable_onload}" -eq 1 ]
  then
    scenarios+=("java-onload")
  fi
fi

if [ "${enable_c_driver}" -eq 1 ]
then
  if [ "${no_c_driver}" -eq 0 ]
  then
    scenarios+=("c")
  fi

  if [ "${enable_onload}" -eq 1 ]
  then
    scenarios+=("c-onload")
  fi

  if [ "${enable_ef_vi}" -eq 1 ]
  then
    scenarios+=("c-ef_vi")
  fi

  if [ "${enable_ats}" -eq 1 ]
  then
    scenarios+=("c-ats")

    if [ "${enable_onload}" -eq 1 ]
    then
      scenarios+=("c-ats-onload")
    fi

    if [ "${enable_ef_vi}" -eq 1 ]
    then
      scenarios+=("c-ats-ef_vi")
    fi
  fi
fi

for index in "${!scenarios[@]}"
do
  scenario="${scenarios[index]}"
  client_driver="${client_drivers[index]}"
  server_driver="${server_drivers[index]}"

  for mode in "${modes[@]}"
  do
    for num_streams in "${streams[@]}"
    do
      test="echo-${scenario}-mode-${mode}-streams-${num_streams}"
      echo -e "\n Testing scenario: '${test}'\n"

      client_destination_channels=""
      client_source_channels=""
      server_destination_channels=""
      server_source_channels=""
      destination_streams=""
      source_streams=""

      for (( i=0; i<num_streams; i++ ))
      do
        if [ "${mode}" == "dedicated" ]
        then
          dest_port=$((13000 + i))
          src_port=$((13100 + i))
        else
          dest_port=13000
          src_port=13100
        fi
        dest_stream=$((1000000 + i))
        src_stream=$((2000000 + i))

        server_destination_channels+="aeron:udp?endpoint=${DESTINATION_IP}:${dest_port}|interface=${SERVER_INTERFACE}|mtu=${mtu},"
        server_source_channels+="aeron:udp?endpoint=${SOURCE_IP}:${src_port}|interface=${SERVER_INTERFACE}|mtu=${mtu},"
        client_destination_channels+="aeron:udp?endpoint=${DESTINATION_IP}:${dest_port}|interface=${CLIENT_INTERFACE}|mtu=${mtu},"
        client_source_channels+="aeron:udp?endpoint=${SOURCE_IP}:${src_port}|interface=${CLIENT_INTERFACE}|mtu=${mtu},"

        destination_streams+="${dest_stream},"
        source_streams+="${src_stream},"
      done

      client_class_name="uk.co.real_logic.benchmarks.remote.LoadTestRig"
      server_class_name="uk.co.real_logic.benchmarks.aeron.remote.EchoNode"

      start_client="\
      export JAVA_HOME=\"${CLIENT_JAVA_HOME}\" \
      ; $(kill_java_process "${client_class_name}") \
      ; ${client_driver} \
      && taskset -c ${CLIENT_LOAD_TEST_RIG_OTHER_CPU_CORES} ${CLIENT_BENCHMARKS_PATH}/scripts/aeron/echo-client & \
      $(await_java_process_start "${client_class_name}") \
      ; $(pin_thread \${pid} "load-test-rig" "${CLIENT_LOAD_TEST_RIG_MAIN_CPU_CORE}") \
      && tail --pid=\$! -f /dev/null; kill -9 \${driver_pid}; wait"

      start_server="\
      export JAVA_HOME=\"${SERVER_JAVA_HOME}\" \
      && ${server_driver} \
      && export JVM_OPTS=\"\
      -Duk.co.real_logic.benchmarks.aeron.remote.destination.channels=${server_destination_channels%?} \
      -Duk.co.real_logic.benchmarks.aeron.remote.destination.streams=${destination_streams%?} \
      -Duk.co.real_logic.benchmarks.aeron.remote.source.channels=${server_source_channels%?} \
      -Duk.co.real_logic.benchmarks.aeron.remote.source.streams=${source_streams%?}\" \
      && taskset -c ${SERVER_OTHER_CPU_CORES} ${SERVER_BENCHMARKS_PATH}/scripts/aeron/echo-server & \
      $(await_java_process_start "${server_class_name}") \
      ; $(pin_thread \${pid} "echo" "${SERVER_ECHO_CPU_CORE}") \
      && tail --pid=\$! -f /dev/null"

      stop_server="$(kill_java_process "${server_class_name}"); \
      $(stop_media_driver)"

      run_benchmarks \
        "${start_client}" \
        "$(kill_java_process "${server_class_name}"); ${start_server}" \
        "${stop_server}" \
        "uk.co.real_logic.benchmarks.remote.output.file=${test}" \
        "uk.co.real_logic.benchmarks.remote.output.directory=${CLIENT_BENCHMARKS_PATH}/scripts/results" \
        "uk.co.real_logic.benchmarks.aeron.remote.destination.channels=${client_destination_channels%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.destination.streams=${destination_streams%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.source.channels=${client_source_channels%?}" \
        "uk.co.real_logic.benchmarks.aeron.remote.source.streams=${source_streams%?}"
    done
  done
done

download_results "${results_file}" "${CLIENT_BENCHMARKS_PATH}/scripts/results" "${DIR}/.."